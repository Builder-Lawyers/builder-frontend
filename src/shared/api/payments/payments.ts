/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Site Creation API
 * API for creating user sites with templates
 * OpenAPI spec version: 1.0.0
 */
import type {
  BadRequestErrorResponse,
  CreatePaymentRequest,
  CreatePaymentResponse,
  InternalServerErrorResponse,
  PaymentStatusResponse,
  StripeWebhookRequest,
  UnauthorizedErrorResponse,
} from ".././model";

import { customInstance } from ".././custom-instance";

/**
 * Returns a client secret to create a checkout session for payment
 * @summary Gets a client secret to create a payment
 */
export type createPaymentResponse200 = {
  data: CreatePaymentResponse;
  status: 200;
};

export type createPaymentResponse400 = {
  data: BadRequestErrorResponse;
  status: 400;
};

export type createPaymentResponse401 = {
  data: UnauthorizedErrorResponse;
  status: 401;
};

export type createPaymentResponse500 = {
  data: InternalServerErrorResponse;
  status: 500;
};

export type createPaymentResponseComposite =
  | createPaymentResponse200
  | createPaymentResponse400
  | createPaymentResponse401
  | createPaymentResponse500;

export type createPaymentResponse = createPaymentResponseComposite & {
  headers: Headers;
};

export const getCreatePaymentUrl = () => {
  return `/payments`;
};

export const createPayment = async (
  createPaymentRequest: CreatePaymentRequest,
  options?: RequestInit,
): Promise<createPaymentResponse> => {
  return customInstance<createPaymentResponse>(getCreatePaymentUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createPaymentRequest),
  });
};

/**
 * Returns a payment checkout session info
 * @summary Gets a payment checkout session info
 */
export type getPaymentStatusResponse200 = {
  data: PaymentStatusResponse;
  status: 200;
};

export type getPaymentStatusResponse400 = {
  data: BadRequestErrorResponse;
  status: 400;
};

export type getPaymentStatusResponse401 = {
  data: UnauthorizedErrorResponse;
  status: 401;
};

export type getPaymentStatusResponse500 = {
  data: InternalServerErrorResponse;
  status: 500;
};

export type getPaymentStatusResponseComposite =
  | getPaymentStatusResponse200
  | getPaymentStatusResponse400
  | getPaymentStatusResponse401
  | getPaymentStatusResponse500;

export type getPaymentStatusResponse = getPaymentStatusResponseComposite & {
  headers: Headers;
};

export const getGetPaymentStatusUrl = (id: string) => {
  return `/payments/${id}`;
};

export const getPaymentStatus = async (
  id: string,
  options?: RequestInit,
): Promise<getPaymentStatusResponse> => {
  return customInstance<getPaymentStatusResponse>(getGetPaymentStatusUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Listens for webhook requests from stripe
 */
export type handleEventResponse200 = {
  data: null;
  status: 200;
};

export type handleEventResponse400 = {
  data: BadRequestErrorResponse;
  status: 400;
};

export type handleEventResponse500 = {
  data: InternalServerErrorResponse;
  status: 500;
};

export type handleEventResponseComposite =
  | handleEventResponse200
  | handleEventResponse400
  | handleEventResponse500;

export type handleEventResponse = handleEventResponseComposite & {
  headers: Headers;
};

export const getHandleEventUrl = () => {
  return `/payments/webhook`;
};

export const handleEvent = async (
  stripeWebhookRequest: StripeWebhookRequest,
  options?: RequestInit,
): Promise<handleEventResponse> => {
  return customInstance<handleEventResponse>(getHandleEventUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(stripeWebhookRequest),
  });
};
