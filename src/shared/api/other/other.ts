/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Site Creation API
 * API for creating user sites with templates
 * OpenAPI spec version: 1.0.0
 */
import type {
  BadRequestErrorResponse,
  DomainAvailability,
  EnrichContentRequest,
  EnrichContentResponse,
  FileUploadBody,
  FileUploadedResponse,
  InternalServerErrorResponse,
} from ".././model";

import { customInstance } from ".././custom-instance";

/**
 * @summary Enrich some user provided info using AI
 */
export type enrichContentResponse200 = {
  data: EnrichContentResponse;
  status: 200;
};

export type enrichContentResponse400 = {
  data: BadRequestErrorResponse;
  status: 400;
};

export type enrichContentResponse500 = {
  data: InternalServerErrorResponse;
  status: 500;
};

export type enrichContentResponseComposite =
  | enrichContentResponse200
  | enrichContentResponse400
  | enrichContentResponse500;

export type enrichContentResponse = enrichContentResponseComposite & {
  headers: Headers;
};

export const getEnrichContentUrl = () => {
  return `/ai/enrich`;
};

export const enrichContent = async (
  enrichContentRequest: EnrichContentRequest,
  options?: RequestInit,
): Promise<enrichContentResponse> => {
  return customInstance<enrichContentResponse>(getEnrichContentUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(enrichContentRequest),
  });
};

/**
 * @summary Upload a file for site static content
 */
export type fileUploadResponse201 = {
  data: FileUploadedResponse;
  status: 201;
};

export type fileUploadResponse400 = {
  data: BadRequestErrorResponse;
  status: 400;
};

export type fileUploadResponse500 = {
  data: InternalServerErrorResponse;
  status: 500;
};

export type fileUploadResponseComposite =
  | fileUploadResponse201
  | fileUploadResponse400
  | fileUploadResponse500;

export type fileUploadResponse = fileUploadResponseComposite & {
  headers: Headers;
};

export const getFileUploadUrl = () => {
  return `/file/upload`;
};

export const fileUpload = async (
  fileUploadBody: FileUploadBody,
  options?: RequestInit,
): Promise<fileUploadResponse> => {
  const formData = new FormData();
  if (fileUploadBody.file !== undefined) {
    formData.append(`file`, fileUploadBody.file);
  }
  if (fileUploadBody.metadata !== undefined) {
    formData.append(`metadata`, JSON.stringify(fileUploadBody.metadata));
  }

  return customInstance<fileUploadResponse>(getFileUploadUrl(), {
    ...options,
    method: "POST",
    body: formData,
  });
};

/**
 * Returns whether a domain is available or not
 * @summary Checks domain availability
 */
export type checkDomainResponse200 = {
  data: DomainAvailability;
  status: 200;
};

export type checkDomainResponse400 = {
  data: BadRequestErrorResponse;
  status: 400;
};

export type checkDomainResponse500 = {
  data: InternalServerErrorResponse;
  status: 500;
};

export type checkDomainResponseComposite =
  | checkDomainResponse200
  | checkDomainResponse400
  | checkDomainResponse500;

export type checkDomainResponse = checkDomainResponseComposite & {
  headers: Headers;
};

export const getCheckDomainUrl = (domain: string) => {
  return `/domain/${domain}`;
};

export const checkDomain = async (
  domain: string,
  options?: RequestInit,
): Promise<checkDomainResponse> => {
  return customInstance<checkDomainResponse>(getCheckDomainUrl(domain), {
    ...options,
    method: "GET",
  });
};
