/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Site Creation API
 * API for creating user sites with templates
 * OpenAPI spec version: 1.0.0
 */
import type {
  BadRequestErrorResponse,
  CreateTemplateRequest,
  CreateTemplateResponse,
  InternalServerErrorResponse,
  TemplateInfo,
} from ".././model";

import { customInstance } from ".././custom-instance";

/**
 * @summary Create a new template
 */
export type createTemplateResponse201 = {
  data: CreateTemplateResponse;
  status: 201;
};

export type createTemplateResponse400 = {
  data: BadRequestErrorResponse;
  status: 400;
};

export type createTemplateResponse500 = {
  data: InternalServerErrorResponse;
  status: 500;
};

export type createTemplateResponseComposite =
  | createTemplateResponse201
  | createTemplateResponse400
  | createTemplateResponse500;

export type createTemplateResponse = createTemplateResponseComposite & {
  headers: Headers;
};

export const getCreateTemplateUrl = () => {
  return `/template`;
};

export const createTemplate = async (
  createTemplateRequest: CreateTemplateRequest,
  options?: RequestInit,
): Promise<createTemplateResponse> => {
  return customInstance<createTemplateResponse>(getCreateTemplateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createTemplateRequest),
  });
};

/**
 * Returns template info such as pages.json
 * @summary Gets template info
 */
export type getTemplateResponse200 = {
  data: TemplateInfo;
  status: 200;
};

export type getTemplateResponse400 = {
  data: BadRequestErrorResponse;
  status: 400;
};

export type getTemplateResponse500 = {
  data: InternalServerErrorResponse;
  status: 500;
};

export type getTemplateResponseComposite =
  | getTemplateResponse200
  | getTemplateResponse400
  | getTemplateResponse500;

export type getTemplateResponse = getTemplateResponseComposite & {
  headers: Headers;
};

export const getGetTemplateUrl = (id: number) => {
  return `/template/${id}`;
};

export const getTemplate = async (
  id: number,
  options?: RequestInit,
): Promise<getTemplateResponse> => {
  return customInstance<getTemplateResponse>(getGetTemplateUrl(id), {
    ...options,
    method: "GET",
  });
};
