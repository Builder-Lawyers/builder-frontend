/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Site Creation API
 * API for creating user sites with templates
 * OpenAPI spec version: 1.0.0
 */
import type {
  BadRequestErrorResponse,
  CreateConfirmation,
  CreateSession,
  InternalServerErrorResponse,
  OauthTokenVerified,
  SessionInfo,
  UnauthorizedErrorResponse,
  VerifiedUser,
  VerifyCode,
  VerifyOauthToken,
} from ".././model";

import { customInstance } from ".././custom-instance";

/**
 * Gets session info from cookie
 * @summary Gets session info from cookie
 */
export type getSessionResponse200 = {
  data: SessionInfo;
  status: 200;
};

export type getSessionResponse401 = {
  data: UnauthorizedErrorResponse;
  status: 401;
};

export type getSessionResponse500 = {
  data: InternalServerErrorResponse;
  status: 500;
};

export type getSessionResponseComposite =
  | getSessionResponse200
  | getSessionResponse401
  | getSessionResponse500;

export type getSessionResponse = getSessionResponseComposite & {
  headers: Headers;
};

export const getGetSessionUrl = () => {
  return `/auth/session`;
};

export const getSession = async (
  options?: RequestInit,
): Promise<getSessionResponse> => {
  return customInstance<getSessionResponse>(getGetSessionUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * Returns a session ID cookie
 * @summary Creates a session from access token
 */
export type createSessionResponse200 = {
  data: null;
  status: 200;
};

export type createSessionResponse400 = {
  data: BadRequestErrorResponse;
  status: 400;
};

export type createSessionResponse401 = {
  data: UnauthorizedErrorResponse;
  status: 401;
};

export type createSessionResponse500 = {
  data: InternalServerErrorResponse;
  status: 500;
};

export type createSessionResponseComposite =
  | createSessionResponse200
  | createSessionResponse400
  | createSessionResponse401
  | createSessionResponse500;

export type createSessionResponse = createSessionResponseComposite & {
  headers: Headers;
};

export const getCreateSessionUrl = () => {
  return `/auth/session`;
};

export const createSession = async (
  createSession: CreateSession,
  options?: RequestInit,
): Promise<createSessionResponse> => {
  return customInstance<createSessionResponse>(getCreateSessionUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createSession),
  });
};

/**
 * Sends a mail with confirmation link for user signup
 * @summary Creates a confirmation mail with code for user signup
 */
export type createConfirmationResponse201 = {
  data: null;
  status: 201;
};

export type createConfirmationResponse400 = {
  data: BadRequestErrorResponse;
  status: 400;
};

export type createConfirmationResponse500 = {
  data: InternalServerErrorResponse;
  status: 500;
};

export type createConfirmationResponseComposite =
  | createConfirmationResponse201
  | createConfirmationResponse400
  | createConfirmationResponse500;

export type createConfirmationResponse = createConfirmationResponseComposite & {
  headers: Headers;
};

export const getCreateConfirmationUrl = () => {
  return `/auth/confirmation`;
};

export const createConfirmation = async (
  createConfirmation: CreateConfirmation,
  options?: RequestInit,
): Promise<createConfirmationResponse> => {
  return customInstance<createConfirmationResponse>(
    getCreateConfirmationUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(createConfirmation),
    },
  );
};

/**
 * Verifies provided confirmation code
 * @summary Verifies provided confirmation code
 */
export type verifyUserResponse200 = {
  data: VerifiedUser;
  status: 200;
};

export type verifyUserResponse400 = {
  data: BadRequestErrorResponse;
  status: 400;
};

export type verifyUserResponse500 = {
  data: InternalServerErrorResponse;
  status: 500;
};

export type verifyUserResponseComposite =
  | verifyUserResponse200
  | verifyUserResponse400
  | verifyUserResponse500;

export type verifyUserResponse = verifyUserResponseComposite & {
  headers: Headers;
};

export const getVerifyUserUrl = () => {
  return `/auth/verify`;
};

export const verifyUser = async (
  verifyCode: VerifyCode,
  options?: RequestInit,
): Promise<verifyUserResponse> => {
  return customInstance<verifyUserResponse>(getVerifyUserUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(verifyCode),
  });
};

/**
 * Verifies provided oauth2 id_token, creates a user and returns a session upon success
 * @summary Verifies provided oauth2 id_token
 */
export type verifyOauthTokenResponse201 = {
  data: OauthTokenVerified;
  status: 201;
};

export type verifyOauthTokenResponse400 = {
  data: BadRequestErrorResponse;
  status: 400;
};

export type verifyOauthTokenResponse500 = {
  data: InternalServerErrorResponse;
  status: 500;
};

export type verifyOauthTokenResponseComposite =
  | verifyOauthTokenResponse201
  | verifyOauthTokenResponse400
  | verifyOauthTokenResponse500;

export type verifyOauthTokenResponse = verifyOauthTokenResponseComposite & {
  headers: Headers;
};

export const getVerifyOauthTokenUrl = () => {
  return `/auth/oauth/verify`;
};

export const verifyOauthToken = async (
  verifyOauthToken: VerifyOauthToken,
  options?: RequestInit,
): Promise<verifyOauthTokenResponse> => {
  return customInstance<verifyOauthTokenResponse>(getVerifyOauthTokenUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(verifyOauthToken),
  });
};
