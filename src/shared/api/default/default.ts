/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Site Creation API
 * API for creating user sites with templates
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CreatePaymentRequest,
  CreatePaymentResponse,
  CreateSession,
  DomainAvailability,
  EnrichContentRequest,
  EnrichContentResponse,
  PaymentStatusResponse,
  StripeWebhookRequest
} from '.././model';




  /**
 * @summary Enrich some user provided info using AI
 */
export const enrichContent = <TData = AxiosResponse<EnrichContentResponse>>(
    enrichContentRequest: EnrichContentRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/ai/enrich`,
      enrichContentRequest,options
    );
  }
/**
 * Returns whether a domain is available or not
 * @summary Checks domain availability
 */
export const checkDomain = <TData = AxiosResponse<DomainAvailability>>(
    domain: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/domain/${domain}`,options
    );
  }
/**
 * Returns a session ID cookie
 * @summary Gets a session from access token
 */
export const createSession = <TData = AxiosResponse<null>>(
    createSession: CreateSession, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/session`,
      createSession,options
    ).then((res) => {if (res.data === "") res.data = null; return res as TData;});
  }
/**
 * Returns a client secret to create a checkout session for payment
 * @summary Gets a client secret to create a payment
 */
export const createPayment = <TData = AxiosResponse<CreatePaymentResponse>>(
    createPaymentRequest: CreatePaymentRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/payments`,
      createPaymentRequest,options
    );
  }
/**
 * Returns a payment checkout session info
 * @summary Gets a payment checkout session info
 */
export const getPaymentStatus = <TData = AxiosResponse<PaymentStatusResponse>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/payments/${id}`,options
    );
  }
/**
 * @summary Listens for webhook requests from stripe
 */
export const handleEvent = <TData = AxiosResponse<null>>(
    stripeWebhookRequest: StripeWebhookRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/payments/webhook`,
      stripeWebhookRequest,options
    ).then((res) => {if (res.data === "") res.data = null; return res as TData;});
  }
